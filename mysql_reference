mysql reference worksheet

// RESET PASSWORD
SET PASSWORD = PASSWORD('your_new_password');

SET PASSWORD = PASSWORD('94vpdbtgj6pyfjmxnz');

// CREATE A DATABASE

CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name
    [create_specification] ...

create_specification:
    [DEFAULT] CHARACTER SET [=] charset_name
  | [DEFAULT] COLLATE [=] collation_name

// SHOW DATABASES CREATED

SHOW DATABASES;

// SWITCH TO db_name

USE db_name;

// SHOW TABLES IN DB

SHOW TABLES;

// EXECUTE COMMANDS IN A SQL FILE
// (ALWAYS USE ABSOLUTE PATH?)

SOURCE filename
//E.G.: source /Users/jasondixon/Dropbox/Projects/SQL_Cookbook/tables.sql;

// SUBSTRING

//length ARGUMENT NOT NEEDED IF WANT TO SELECT ALL CHARACTERS TO RIGHT OF SPECIFIC INDEX POSITION
//****ALSO NOTE THAT SQL STRINGS ARE 1-INDEXED, NOT 0-INDEXED

SUBSTR(string, position, length)
//OR
SUBSTR(string, position)
//OR
SUBSTRING_INDEX(string, delimiter, count)


//ALSO: substr(col, length(col)-1):
//To sort by the last two characters of a string, 
//find the end of the string (which is the length of the string) 
//and subtract 1.
//The start position will be the second to last character in the string.
/*
select ename, job from emp order by substr( job, length( job)-1)
/*


//e.g. https://stackoverflow.com/questions/12771311/how-to-substring-a-mysql-table-column

command                                      prints
-------------------------------------------  -----------
select substr("abcd", 1, 1)                  #a
select substr("abcd", 1, 2)                  #ab
select substr("abcd", 2, 1)                  #b
select substr("abcd", 2, 2)                  #bc
select substr("abcd", -2, 1)                 #c
select substr("abcd", -2, 2)                 #cd

select substring_index('ababab', 'b', 1);    #a
select substring_index('ababab', 'b', 2);    #aba
select substring_index('ababab', 'b', 3);    #ababa
select substring_index('ababab', 'b', -1);   #
select substring_index('ababab', 'b', -2);   #ab
select substring_index('ababab', 'b', -3);   #abab

select substr("abcd", 2)                     #bcd
select substr("abcd", 3)                     #cd
select substr("abcd", 4)                     #d
select substr("abcd", -2)                    #cd
select substr("abcd", -3)                    #bcd
select substr("abcd", -4)                    #abcd

// SORT ON DATA-DEPENDENT KEY
use CASE expression in order by clause to dynamically change how results are sorted

//SUBQUERIES
Don't put semicolon in subquery

YES:
SELECT DEPTNO 
FROM DEPT
WHERE DEPTNO NOT IN (
    SELECT DISTINCT DEPTNO FROM EMP
    )
;

NO:
SELECT DEPTNO 
FROM DEPT
WHERE DEPTNO NOT IN (
    SELECT DISTINCT DEPTNO FROM EMP;
    )
;

FULL OUTER JOIN

MYSQL DOES NOT YET HAVE A FULL OUTER JOIN,
SO INSTEAD UNION THE RESULTS OF THE 
TWO DIFFERENT OUTER JOINS

// GROUP CONCAT can build delimited list for each grouping cateogry
e.g.

+--------+--------------------------------------+
| DEPTNO | EMPS                                 |
+--------+--------------------------------------+
|     10 | CLARK,KING,MILLER                    |
|     20 | SMITH,JONES,SCOTT,ADAMS,FORD         |
|     30 | ALLEN,WARD,MARTIN,BLAKE,TURNER,JAMES |
+--------+--------------------------------------+

LEFT JOINS AND FIELD ORDER

ORDER OF FIELDS CONTROLS DISPLAY IN RESULTS,
BUT ORDER OF TABLES IN FROM CLAUSE DETERMINES
ORDER OF JOIN.

e.g.

*** NOTE THE NULLS IN THE LAST ROW ***

SELECT e.ename,
	e.deptno AS emp_deptno,
	d.*
FROM dept d LEFT JOIN emp e
ON (d.deptno = e.deptno)
;

+--------+------------+--------+------------+----------+
| ename  | emp_deptno | DEPTNO | DNAME      | LOC      |
+--------+------------+--------+------------+----------+
| SMITH  |         20 |     20 | RESEARCH   | DALLAS   |
| ALLEN  |         30 |     30 | SALES      | CHICAGO  |
| WARD   |         30 |     30 | SALES      | CHICAGO  |
| JONES  |         20 |     20 | RESEARCH   | DALLAS   |
| MARTIN |         30 |     30 | SALES      | CHICAGO  |
| BLAKE  |         30 |     30 | SALES      | CHICAGO  |
| CLARK  |         10 |     10 | ACCOUNTING | NEW YORK |
| SCOTT  |         20 |     20 | RESEARCH   | DALLAS   |
| KING   |         10 |     10 | ACCOUNTING | NEW YORK |
| TURNER |         30 |     30 | SALES      | CHICAGO  |
| ADAMS  |         20 |     20 | RESEARCH   | DALLAS   |
| JAMES  |         30 |     30 | SALES      | CHICAGO  |
| FORD   |         20 |     20 | RESEARCH   | DALLAS   |
| MILLER |         10 |     10 | ACCOUNTING | NEW YORK |
| NULL   |       NULL |     40 | OPERATIONS | BOSTON   |
+--------+------------+--------+------------+----------+
15 rows in set (0.00 sec)

NEED TO JOIN ON A FIELD THAT CAN CONTAIN NULLS?
SINCE NULL != NULL NORMALLY WOULDN'T BE ABLE TO DO IT.
BUT IT WORKS IF YOU USE COALESCE TO CONVERT ANY NULLS TO A COMMON VALUE
E.G.
WHERE COALESCE(V.COMM, 0) = COALESCE(E.COMM, 0)

USE CORRELATED SUBQUERIES AND UNION ALL TO FIND ROWS IN TWO TABLES THAT ARE NOT SHARED
BETWEEN THE TABLES.


