/*

SELECT ENAME, DEPTNO
FROM EMP
WHERE DEPTNO IN (10)

UNION ALL

SELECT "-----", "------"

UNION ALL

SELECT DNAME, DEPTNO
FROM DEPT
;

SELECT EMP.ENAME, DEPT.LOC
FROM EMP, DEPT
WHERE EMP.DEPTNO IN (10)
    AND DEPT.DEPTNO = EMP.DEPTNO
;

SELECT EMP.ENAME, DEPT.LOC
FROM EMP
INNER JOIN DEPT
ON DEPT.DEPTNO = EMP.DEPTNO
WHERE EMP.DEPTNO IN (10)
;
-- 3.3
CREATE VIEW V
AS
SELECT ENAME, JOB, SAL
FROM EMP
WHERE JOB = "CLERK"
;

SELECT * FROM V;

SELECT V.ENAME, V.JOB, V.SAL, E.EMPNO, E.MGR, E.HIREDATE, E.COMM, E.DEPTNO
FROM V
JOIN EMP E
ON (
    E.ENAME = V.ENAME
    AND E.JOB = V.JOB
    AND E.SAL = V.SAL
    )
;

-- 3.4
SELECT * FROM DEPT
;
SELECT "----"
;
SELECT DEPTNO FROM EMP
;

SELECT DISTINCT DEPTNO FROM EMP;


SELECT DEPTNO 
FROM DEPT
WHERE DEPTNO NOT IN (20)
;

SELECT DEPTNO 
FROM DEPT
WHERE DEPTNO NOT IN (SELECT 20)
;

SELECT DEPTNO 
FROM DEPT
WHERE DEPTNO NOT IN (
    SELECT DISTINCT DEPTNO FROM EMP
    )
;

-- UNEXPECTED RESULTS MAY BE RECEIVED IF DEPNO COLUMN HAS NULLS,
-- DUE OT WAY 'IN' AND 'NOT IN' WORK.
-- EXAMPLE THAT DOESN'T HAVE PROBLEM IF DEPTNO COLUMN HAS NULLS
-- (NOTE: USES CORRELATED SUBQUERY)
SELECT DEPT.DEPTNO
FROM DEPT
WHERE NOT EXISTS (
    SELECT 1 FROM EMP
    WHERE DEPT.DEPTNO = EMP.DEPTNO
)
;

SELECT DEPT.DEPTNO AS ALL_DEPTS
FROM DEPT
;

SELECT EMP.DEPTNO FROM EMP WHERE EMP.DEPTNO = 10
;
SELECT EMP.DEPTNO FROM EMP WHERE EMP.DEPTNO = 20
;
SELECT EMP.DEPTNO FROM EMP WHERE EMP.DEPTNO = 30
;
SELECT EMP.DEPTNO FROM EMP WHERE EMP.DEPTNO = 40
;

SELECT 1 AS 10_EXISTS FROM EMP WHERE EMP.DEPTNO = 10
;
SELECT 1 AS 20_EXISTS FROM EMP WHERE EMP.DEPTNO = 20
;
SELECT 1 AS 30_EXISTS FROM EMP WHERE EMP.DEPTNO = 30
;
SELECT 1 AS 40_EXISTS FROM EMP WHERE EMP.DEPTNO = 40
;

-- 3.5
SELECT DEPT.*, EMP.ENAME, EMP.DEPTNO AS EMP_DEPTNO FROM DEPT 
LEFT OUTER JOIN EMP
ON (DEPT.DEPTNO = EMP.DEPTNO)
;

SELECT DEPT.*, EMP.ENAME, EMP.DEPTNO AS EMP_DEPTNO FROM DEPT 
LEFT OUTER JOIN EMP
ON (DEPT.DEPTNO = EMP.DEPTNO)
WHERE EMP.DEPTNO IS NULL
;

SELECT DEPT.* FROM DEPT 
LEFT OUTER JOIN EMP
ON (DEPT.DEPTNO = EMP.DEPTNO)
WHERE EMP.DEPTNO IS NULL
;

-- 3.6
-- SELECT * FROM EMP_BONUS
-- ;
-- SHOW COLUMNS FROM EMP;
-- SHOW COLUMNS FROM DEPT;
-- SHOW COLUMNS FROM EMP_BONUS;


SELECT EMP.ENAME, DEPT.LOC, EMP_BONUS.RECEIVED
FROM EMP
LEFT JOIN DEPT
ON EMP.DEPTNO = DEPT.DEPTNO
LEFT JOIN EMP_BONUS
ON EMP.EMPNO = EMP_BONUS.EMPNO
ORDER BY DEPT.LOC, EMP.ENAME
;

-- SAME RESULTS THROUGH USE OF SCALAR SUBQUERY
SELECT EMP.ENAME, DEPT.LOC,
(
    SELECT EMP_BONUS.RECEIVED FROM EMP_BONUS
    WHERE EMP_BONUS.EMPNO = EMP.EMPNO
) AS RECEIVED
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO
ORDER BY DEPT.LOC, EMP.ENAME
;


-- 3.3 MORE PRACTICE
SELECT E.EMPNO, E.ENAME EMP_NAME, V.ENAME VIEW_EMP_NAME FROM EMP E
LEFT JOIN V
ON E.ENAME = V.ENAME
;

SELECT COUNT(*) FROM EMP
;

SELECT E.EMPNO, E.ENAME EMP_NAME, V.ENAME VIEW_EMP_NAME FROM EMP E
LEFT JOIN V
ON E.ENAME = V.ENAME
WHERE V.ENAME IS NOT NULL
;

SELECT * FROM V;

SELECT DEPTNO DEPT_DEPTNO FROM DEPT;

-- SELECT 1 FROM DEPT;

SELECT DISTINCT DEPTNO EMP_DEPTNO FROM EMP
;

-- ATTEMPT WITHOUT LOOKING
-- NOTE: AFTER LOOKING AT BOOK ANSWERS, THIS IS THE VERSION
-- THAT ACCOUNTS FOR POSSIBILITY OF NULLS
-- FIRST TWO BOOK SOLUTIONS WOULD NOT RETURN EXPECTED RESULTS 
-- IF THERE ARE NULLS
SELECT DEPTNO FROM DEPT
WHERE NOT EXISTS (
    SELECT 1 FROM EMP
    WHERE EMP.DEPTNO = DEPT.DEPTNO)

;
-- ORIGINAL SOLUTION FROM BOOK WITHOUT ACCOUNTING FOR DUPLICATES
SELECT DEPTNO 
FROM DEPT
WHERE DEPTNO NOT IN (
    SELECT DEPTNO FROM EMP)
;
-- OR, TO REMOVE DUPLICATES
SELECT DISTINCT DEPTNO 
FROM DEPT
WHERE DEPTNO NOT IN (
    SELECT DEPTNO FROM EMP)
;

-- 3.5
SELECT DEPT.DEPTNO, DEPT.DNAME, DEPT.LOC
FROM DEPT
WHERE DEPT.DEPTNO NOT IN (SELECT DISTINCT EMP.DEPTNO FROM EMP)
;

-- OR, closer to book solution
SELECT DEPT.DEPTNO, DEPT.DNAME, DEPT.LOC, EMP.DEPTNO
FROM DEPT
LEFT JOIN EMP
ON DEPT.DEPTNO = EMP.DEPTNO
WHERE EMP.DEPTNO IS NULL
;

-- WITHOUT HELPER 'EMP.DEPTNO' COLUMN
SELECT DEPT.DEPTNO, DEPT.DNAME, DEPT.LOC
FROM DEPT
LEFT JOIN EMP
ON DEPT.DEPTNO = EMP.DEPTNO
WHERE EMP.DEPTNO IS NULL
;


DROP VIEW IF EXISTS V;

CREATE VIEW V AS
SELECT * FROM EMP WHERE DEPTNO != 10
UNION ALL
SELECT * FROM EMP WHERE ENAME = "WARD"
;

SELECT * FROM V
;

*/
-- 3.9

-- FOLLOWING ARE EXPLORATORY QUERIES BUT NOT A SOLUTION
-- DISCOVERED BOOK USES SLIGHTLY DIFFERENT DATA FROM EMP_BONUS TABLE
-- IN ORDER TO SHOW WHAT HAPPENS WITH AGGREGATES OF DATA THAT HAS
-- DUPLICATES

SELECT * FROM EMP WHERE DEPTNO = 10
;

SELECT * FROM EMP_BONUS
;

SELECT EMP.EMPNO, EMP.ENAME, EMP.DEPTNO, EMP.SAL,
BONUS.TYPE BONUS_TYPE,
EMP.SAL * CASE
    WHEN BONUS.TYPE = 1 THEN .1
    WHEN BONUS.TYPE = 2 THEN .2
    WHEN BONUS.TYPE = 3 THEN .3
    ELSE 0
    END AS BONUS_AMOUNT
FROM EMP
LEFT JOIN EMP_BONUS BONUS
ON EMP.EMPNO = BONUS.EMPNO
WHERE EMP.DEPTNO = 10
;

SELECT SUM(SAL), SUM(BONUS_AMOUNT) FROM
(
SELECT EMP.EMPNO, EMP.ENAME, EMP.DEPTNO, EMP.SAL,
BONUS.TYPE BONUS_TYPE,
EMP.SAL * CASE
    WHEN BONUS.TYPE = 1 THEN .1
    WHEN BONUS.TYPE = 2 THEN .2
    WHEN BONUS.TYPE = 3 THEN .3
    ELSE 0
    END AS BONUS_AMOUNT
FROM EMP
LEFT JOIN EMP_BONUS BONUS
ON EMP.EMPNO = BONUS.EMPNO
WHERE EMP.DEPTNO = 10
) X
;

select e.ename, e.sal 
from emp e, emp_bonus eb 
where e.empno = eb.empno 
and e.deptno = 10
;

SELECT * FROM EMP_BONUS
;

